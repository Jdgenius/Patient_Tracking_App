{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jdgen\\\\OneDrive\\\\Documents\\\\React\\\\API_practice\\\\frontend\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //let patientData: Patient[] = [];\n\n  const [patientData, setPatientData] = useState([]);\n  useEffect(() => {\n    setup();\n  }, []);\n  const setup = async () => {\n    let patientarray = await loadPatients();\n    setPatientData(patientarray);\n    console.log(patientData);\n  };\n  const loadPatients = async () => {\n    const url = \"http://localhost:4000/patients\";\n    const options = {\n      method: 'GET',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    let patients = [];\n    try {\n      const response = await fetch(url, options);\n      const data = await response.json();\n      data.map(item => patients.push(item));\n    } catch (error) {\n      console.error(error);\n    }\n    return patients;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"481mG+kSGInUJgmB3lm8G1MiL6U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","App","_s","patientData","setPatientData","setup","patientarray","loadPatients","console","log","url","options","method","headers","patients","response","fetch","data","json","map","item","push","error","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/jdgen/OneDrive/Documents/React/API_practice/frontend/src/App.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n\n  //let patientData: Patient[] = [];\n\n  const [patientData, setPatientData] = useState<Patient[]>([])\n  \n\n  useEffect(() => {\n    setup();\n  },[])\n\n  type Patient = {\n    name: string,\n    age: number,\n    start_date?: string | undefined,\n    patient_status: \"awaiting\" | \"resolved\" | \"admitted\",\n    end_date?: string | undefined,\n    reason: string,\n  }\n\n  const setup = async () => {\n    let patientarray: Patient[] = await loadPatients();\n    setPatientData(patientarray)    \n    console.log(patientData);   \n  }\n\n  const loadPatients = async (): Promise<Patient[]> => {\n    const url = \"http://localhost:4000/patients\"\n    const options = {\n      method: 'GET',\n      headers: {\"Content-Type\": \"application/json\"},\n    }\n    let patients: Patient[] = [];\n    try {\n      const response = await fetch(url, options);\n      const data = await response.json();\n      data.map((item: Patient) => (patients.push(item)));\n    } catch (error) {\n      console.error(error);\n    }\n    return patients;\n  }\n\n  return (\n    <div className=\"App\">\n      {/* <p>\n        {patientData[0].name}\n      </p>       */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEb;;EAEA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAY,EAAE,CAAC;EAG7DC,SAAS,CAAC,MAAM;IACdO,KAAK,CAAC,CAAC;EACT,CAAC,EAAC,EAAE,CAAC;EAWL,MAAMA,KAAK,GAAG,MAAAA,CAAA,KAAY;IACxB,IAAIC,YAAuB,GAAG,MAAMC,YAAY,CAAC,CAAC;IAClDH,cAAc,CAACE,YAAY,CAAC;IAC5BE,OAAO,CAACC,GAAG,CAACN,WAAW,CAAC;EAC1B,CAAC;EAED,MAAMI,YAAY,GAAG,MAAAA,CAAA,KAAgC;IACnD,MAAMG,GAAG,GAAG,gCAAgC;IAC5C,MAAMC,OAAO,GAAG;MACdC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QAAC,cAAc,EAAE;MAAkB;IAC9C,CAAC;IACD,IAAIC,QAAmB,GAAG,EAAE;IAC5B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACN,GAAG,EAAEC,OAAO,CAAC;MAC1C,MAAMM,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClCD,IAAI,CAACE,GAAG,CAAEC,IAAa,IAAMN,QAAQ,CAACO,IAAI,CAACD,IAAI,CAAE,CAAC;IACpD,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdd,OAAO,CAACc,KAAK,CAACA,KAAK,CAAC;IACtB;IACA,OAAOR,QAAQ;EACjB,CAAC;EAED,oBACEd,OAAA;IAAKuB,SAAS,EAAC;EAAK;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAIf,CAAC;AAEV;AAACzB,EAAA,CAlDQD,GAAG;AAAA2B,EAAA,GAAH3B,GAAG;AAoDZ,eAAeA,GAAG;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}