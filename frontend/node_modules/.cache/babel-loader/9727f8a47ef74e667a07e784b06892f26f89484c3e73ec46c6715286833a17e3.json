{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jdgen\\\\OneDrive\\\\Documents\\\\React\\\\API_practice\\\\frontend\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //let patientData: Patient[] = [];\n\n  const [patientData, setPatientData] = useState([]);\n  useEffect(() => {\n    loadPatients();\n  }, []);\n  const loadPatients = async () => {\n    const url = \"http://localhost:4000/patients\";\n    const options = {\n      method: 'GET',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    try {\n      const response = await fetch(url, options);\n      const data = await response.json();\n      //setPatientData((prevPatientData) => [...prevPatientData, ...data])\n      setPatientData(prevPatientData => {\n        const newPatients = data.filter(person => !prevPatientData.some(patient => patient.id === person.id));\n        return [...prevPatientData, ...newPatients];\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: patientData.map(person => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [person.name, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this), person.age]\n      }, person.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"481mG+kSGInUJgmB3lm8G1MiL6U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","App","_s","patientData","setPatientData","loadPatients","url","options","method","headers","response","fetch","data","json","prevPatientData","newPatients","filter","person","some","patient","id","error","console","className","children","map","name","fileName","_jsxFileName","lineNumber","columnNumber","age","_c","$RefreshReg$"],"sources":["C:/Users/jdgen/OneDrive/Documents/React/API_practice/frontend/src/App.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n\n  //let patientData: Patient[] = [];\n\n  const [patientData, setPatientData] = useState<Patient[]>([])\n  \n\n  useEffect(() => {\n    loadPatients();\n  },[])\n\n  type Patient = {\n    id: number,\n    name: string,\n    age: number,\n    start_date?: string | undefined,\n    patient_status: \"awaiting\" | \"resolved\" | \"admitted\",\n    end_date?: string | undefined,\n    reason: string,\n  }\n\n  const loadPatients = async () => {\n    const url = \"http://localhost:4000/patients\"\n    const options = {\n      method: 'GET',\n      headers: {\"Content-Type\": \"application/json\"},\n    }\n    try {\n      const response = await fetch(url, options);\n      const data = await response.json();\n      //setPatientData((prevPatientData) => [...prevPatientData, ...data])\n      setPatientData((prevPatientData) => {\n        const newPatients = data.filter((person: Patient) => \n          !prevPatientData.some(patient => patient.id === person.id)\n        );\n        return [...prevPatientData, ...newPatients];\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <ul>\n        {patientData.map((person: Patient)=>(\n          <li key={person.id}>\n            {person.name}\n            <br />\n            {person.age}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEb;;EAEA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAY,EAAE,CAAC;EAG7DC,SAAS,CAAC,MAAM;IACdO,YAAY,CAAC,CAAC;EAChB,CAAC,EAAC,EAAE,CAAC;EAYL,MAAMA,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,MAAMC,GAAG,GAAG,gCAAgC;IAC5C,MAAMC,OAAO,GAAG;MACdC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QAAC,cAAc,EAAE;MAAkB;IAC9C,CAAC;IACD,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAG,EAAEC,OAAO,CAAC;MAC1C,MAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClC;MACAT,cAAc,CAAEU,eAAe,IAAK;QAClC,MAAMC,WAAW,GAAGH,IAAI,CAACI,MAAM,CAAEC,MAAe,IAC9C,CAACH,eAAe,CAACI,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACC,EAAE,KAAKH,MAAM,CAACG,EAAE,CAC3D,CAAC;QACD,OAAO,CAAC,GAAGN,eAAe,EAAE,GAAGC,WAAW,CAAC;MAC7C,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB;EACF,CAAC;EAED,oBACErB,OAAA;IAAKuB,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBxB,OAAA;MAAAwB,QAAA,EACGrB,WAAW,CAACsB,GAAG,CAAER,MAAe,iBAC/BjB,OAAA;QAAAwB,QAAA,GACGP,MAAM,CAACS,IAAI,eACZ1B,OAAA;UAAA2B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,EACLb,MAAM,CAACc,GAAG;MAAA,GAHJd,MAAM,CAACG,EAAE;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAId,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAAC5B,EAAA,CAvDQD,GAAG;AAAA+B,EAAA,GAAH/B,GAAG;AAyDZ,eAAeA,GAAG;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}